[
    {
        "id" : "TEXTCRT",
        "title" : "TEXT Adventure - Homage to Past",
        "contentHTML" : 
        [
            "<p class='intro'>",
                "Terminal-style text adventure prototype — retro CRT vibes meet classic parser gameplay.",
            "</p>",
        
            "<p>",
                "I built this <span class='highlight'>text adventure engine</span> after getting curious about how early interactive fiction like ",
                "<span class='highlight'>Zork</span> worked before graphics existed. ",
                "The focus wasn’t on building a full game, but on <span class='highlight'>exploring parser-driven input</span> (typed commands like ",
                "<code>move left</code>, <code>take key</code>, <code>use terminal</code>) and how to structure them in a minimal retro UI.",
            "</p>",
        
            "<p>",
                "The prototype includes: ",
                "a glowing CRT-style <span class='highlight'>text renderer</span>, ",
                "a responsive <span class='highlight'>command parser</span> with scrollback, ",
                "a math-driven <span class='highlight'>3D skull renderer</span> that rotates in real time, ",
                "and <span class='highlight'>procedural sound effects</span> (startup, typing, errors) — ",
                "all built in <span class='highlight'>pure Pygame</span> with no external assets.",
            "</p>",
        
            "<p>",
                "I collaborated with <span class='highlight'>AI coding tools</span> (ChatGPT, Claude) to generate the modules, ",
                "while I defined the systems and aesthetic rules: how the parser should respond, ",
                "how the CRT text should glow and flicker, and how sound and visuals reinforce the terminal mood. ",
                "The project was less about coding syntax and more about <span class='highlight'>designing interactions</span> ",
                "that make a simple text interface feel alive.",
            "</p>",
        
            "<p>",
                "It’s oddly satisfying watching the fake terminal blink while typing “look around.” ",
                "I may expand this into a full parser adventure someday — for now, it stands as a design study in ",
                "<span class='highlight'>how presentation transforms simple mechanics</span>.",
            "</p>",
        
            "<ul class='skills'>",
                "<li>† <span class='highlight'>Command parsing system (typed input)</span></li>",
                "<li>† <span class='highlight'>Custom CRT-style text renderer</span></li>",
                "<li>† <span class='highlight'>Procedural sound effects (pure Python)</span></li>",
                "<li>† <span class='highlight'>Real-time math-driven 3D skull</span></li>",
                "<li>† <span class='highlight'>Scrollback, color cycling, and interactive terminal UI</span></li>",
            "</ul>"
        ],
        "heroImage" : "assets/images/webp/GL_TA/CRT_TXT.webp",
        "gallery" : 
        [
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_TA/CRT_TXT.webp",
                "caption"   :   "Basic Text Adventure Game"
            },
            {
                "type"      :   "video",
                "src"       :   "https://www.youtube.com/watch?v=JQLCk4czACk",
                "caption"   :   "Simple Demo"
            }
        ],
        "links" : 
        [
            {
                "label" : "Github",
                "url"   : "https://github.com/LoneWolf014/CRT_Text_Adventure"
            }

        ],
        "palette" :
        {

        }
    },
    {
        "id" : "CRT_SNAKE_1",
        "title" : "CRT_Snake — version-1",
        "contentHTML" : 
        [
            "<p class='intro'>",
                "CRT_Snake — Retro Glow, 3D Shapes, and Design Through AI Collaboration",
            "</p>",
        
            "<p>",
                "This project was an experiment in bringing a <span class='highlight'>CRT arcade vibe</span> into a classic Snake game. ",
                "I wanted players to feel like they were playing inside a haunted monitor — glowing scanlines, dying phosphor beams, and strange 3D objects flickering in the background.",
            "</p>",
        
            "<p>",
                "I directed the <span class='highlight'>visual style and design goals</span> from the ground up: the scanline rhythm, the glow behavior, and how the beam should react dynamically to the snake and food. ",
                "To implement those ideas quickly, I paired with <span class='highlight'>AI coding tools</span> which generated the full Pygame code while I iterated on visuals and feel. ",
                "The result is less about the code and more about how the <span class='highlight'>aesthetic rules</span> create atmosphere.",
            "</p>",
        
            "<p>",
                "Key design highlights: the beam isn’t just decoration — it sweeps across the screen and reacts in real time, ",
                "turning a simple Snake clone into an atmospheric CRT demo piece.",
            "</p>",
        
            "<ul class='skills'>",
                "<li>† <span class='highlight'>Classic Snake mechanics (AI-implemented)</span></li>",
                "<li>† <span class='highlight'>Retro CRT arcade aesthetic</span></li>",
                "<li>† <span class='highlight'>Phosphor glow + scanline system directed by design</span></li>",
                "<li>† <span class='highlight'>Dynamic effects tied to gameplay</span></li>",
                "<li>† <span class='highlight'>Exploration of AI as a coding collaborator</span></li>",
            "</ul>"
        ],
        "heroImage" : "assets/images/webp/GL_Snake1/Snake1.webp",
        "gallery" : 
        [
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_Snake1/Snake1.webp",
                "caption"   :   "Screenshot of Classic Snake game with CRT Shaders"
            },
            {
                "type"      :   "video",
                "src"       :   "https://www.youtube.com/watch?v=rFOMQUrHkyA",
                "caption"   :   "Gameplay video of Classic Snake Game clone with CRT Shaders"
            }
        ],
        "links" : 
        [
            {
                "label" : "Github",
                "url"   : "https://github.com/LoneWolf014/CRT_Snake_PyGame_V_1"
            },
            {
                "label" : "Youtube",
                "url"   : "https://www.youtube.com/watch?v=rFOMQUrHkyA"
            }
        ],
        "palette" :
        {
            
        }
    },
    {
        "id" : "CRT_SNAKE_2",
        "title" : "CRT_Snake — version-2",
        "contentHTML" : 
        [

            "<p class='intro'>",
            "    CRT_Snake v2 — Thematic Snake with Retro CRT Skins",
            "</p>",
            "<p class='intro'>",
            "After the first CRT Snake, I wanted to push further — layering transparency, floating 3D objects, and exaggerated glow effects to test how far I could stretch Pygame visually.", 
            "AI handled implementation, while I drove the look and balance of atmosphere vs. playability.",
            "</p>",

            "<p>",
                "This version of <span class='highlight'>CRT Snake</span> was coded in both",
                "<span class='highlight'>Python</span> and <span class='highlight'>Java</span>,",
                " but the <strong>Java build won</strong> — smoother alpha rendering, pixel-perfect CRT effects,",
                "and that sweet, crisp look only Java2D gives when you treat it like a shader lab.",
            "</p>",

            "<p>",
                "Every <span class='highlight'>5 points</span>, the game cycles to a new retro theme:", 
                "from glowing green terminals to warm amber monitors to chunky blue pixel styles with banding and noise.", 
                "The CRT isn't just for looks — the screen has", 
                "<span class='highlight'>scanlines, ghost trails,",
                "phosphor glow, chunky pixel overlays, banding artifacts</span>, and a moving beamline that reacts to gameplay in real-time.",
            "</p>",

            "<p>",
                "Built completely in <span class='highlight'>pure Java Swing</span> (and optionally <span class='highlight'>Pygame</span> for the Python version),", 
                "this project began as a shader experiment and grew into a dual-engine CRT love letter. ",
                "I collaborated with <span class='highlight'>AI coding tools</span> (ChatGPT, Claude) for the full implementation, while I directed the visual design — ",
                "choosing the glow levels, beam timing, and theme transitions that shaped the final feel. ",
                "The focus wasn’t on hand-coding logic, but on <span class='highlight'>prototyping an aesthetic vision</span> rapidly and iterating until it felt right.",
            "</p>",

            "<ul class='skills'>",
            "    <li>† <span class='highlight'>Dynamic CRT theme switching every 5 points</span></li>",
            "    <li>† <span class='highlight'>Scanlines, phosphor glow, pixel noise, banding</span></li>",
            "    <li>† <span class='highlight'>Clean alpha blending & ghosting in Java2D</span></li>",
            "    <li>† <span class='highlight'>Rewritten from Python to Java for visual clarity</span></li>",
            "    <li>† <span class='highlight'>Built with AI pair-programming + pure vibes</span></li>",
            "</ul>"

        ],
        "heroImage" : "assets/images/webp/GL_Snake2/Snake2.webp",
        "gallery" : 
        [
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_Snake2/Snake2.webp",
                "caption"   :   "Shader Style 1"
            },
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_Snake2/Snake2-1.webp",
                "caption"   :   "Shader Style 2"
            },
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_Snake2/Snake2-2.webp",
                "caption"   :   "Shader Style 3"
            },
            {
                "type"      :   "video",
                "src"       :   "https://www.youtube.com/watch?v=407xGToLmzs",
                "caption"   :   "Theme will change after every 5 pellets"
            }
        ],
        "links" : 
        [
            {
                "label"     : "Github - Python (Pygame)",
                "url"       : "https://github.com/LoneWolf014/CRT_Snake_PyGame_V_2"
            },
            {
                "label"     : "Github - JAVA",
                "url"       : "https://github.com/LoneWolf014/CRT_Snake_V_2_Java"
            },
            {
                "label"     :   "Youtube",
                "url"       :   "https://youtu.be/407xGToLmzs"
            }
        ],
        "palette" :
        {
            
        }
    },
    {
        "id" : "CRT_Hangman",
        "title" : "Terminal Hangman - Hello World of Game Programming",
        "contentHTML" : 
        [
    
            "<p class='intro'>",
                "Old-school Hangman reimagined as a CRT terminal game — glowing green text, ASCII borders, and that 80s hacker vibe.",
            "</p>",
    
            "<p>",
                "<span class='highlight'>CRT_Hangman</span> is a terminal-based rework of the classic ",
                "word-guessing game, styled like it’s running on an old green-screen monitor. ",
                "It uses a <span class='highlight'>bordered ASCII UI</span>, glowing text ",
                "via <code>colorama</code>, and a subtle <span class='highlight'>scanline-style refresh effect</span> ",
                "to sell the vintage vibe.",
            "</p>",
    
            "<p>",
                "This was more of a <span class='highlight'>retro design experiment</span> than a game challenge — ",
                "a simple Python build dressed up with CRT-inspired UI polish. ",
                "The <span class='highlight'>hangman figure</span> is rendered stage-by-stage ",
                "in text art, and the whole thing is wrapped in a CRT-styled frame that redraws ",
                "line by line like an old phosphor monitor.",
            "</p>",
    
            "<p>",
                "The full implementation was generated with <span class='highlight'>AI coding tools</span>, ",
                "while I focused on the aesthetic direction — choosing the glow style, frame timing, and ASCII effects ",
                "to make a basic word game feel like a vintage terminal puzzle. ",
                "It was a quick build but a fun exploration of <span class='highlight'>how presentation changes player perception</span>.",
            "</p>",
    
            "<ul class='skills'>",
                "<li>† <span class='highlight'>Terminal-based CRT aesthetic</span></li>",
                "<li>† <span class='highlight'>ASCII-rendered hangman stages</span></li>",
                "<li>† <span class='highlight'>Green-on-black scanline refresh effect</span></li>",
                "<li>† <span class='highlight'>Built in Python with Colorama</span></li>",
                "<li>† <span class='highlight'>AI-assisted implementation, design-driven presentation</span></li>",
            "</ul>"
    
        ],
        "heroImage" : "assets/images/webp/GL_Hangman/TH.webp",
        "gallery" : 
        [
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_Hangman/TH.webp",
                "caption"   :   "Hangman Game in terminal/console"
            },
            {
                "type"      :   "image",
                "src"       :   "assets/images/webp/GL_Hangman/TH_OL.webp",
                "caption"   :   "Hangman Game in terminal/console"
            }

        ],
        "links" : 
        [

            {
                "label" : "view on Github",
                "url"   : "https://github.com/LoneWolf014/Terminal_Hangman_Python"
            }

        ],
        "palette" :
        {
            
        }
    }
]
